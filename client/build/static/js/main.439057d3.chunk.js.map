{"version":3,"sources":["components/Login.js","components/Register.js","components/LeafletDataDB.js","ressources/img/tree-lidge-logo-3.svg","containers/Logpage.js","ressources/img/foret.png","containers/Homepage.js","ressources/img/jean-victor-balin-tree.svg","components/LeafletTreePopup.js","components/LeafletHandlers.js","components/LeafletConstValues.js","components/LeafletMap.js","containers/Gamepage.js","components/Achievements.js","components/Succes.js","components/UserAchievements.js","components/UserName.js","containers/UserPage.js","ressources/img/error404.png","ressources/img/TreeError404.jpg","components/NotFound.js","containers/LeaderboardPage.js","App.js","reportWebVitals.js","index.js"],"names":["ErrorMessage","styled","h3","Button","button","Input","input","Login","navigate","useNavigate","useState","email","setEmail","password","setPassword","errorMessage","setErrorMessage","a","axios","post","response","data","message","className","htmlFor","placeholder","type","id","onChange","event","target","value","onClick","Register","requestWithTimout","username","setUsername","passwordVerify","setPasswordVerify","console","log","Logpage","btnSwitch","setBtnSwitch","toggleBtnSwitchOnClick","Container","Logo","src","MySvg","alt","ContainerButtons","to","div","img","Homepage","Page","ButtonClose","ContainerTitle","Title","Wrapper","Tile","foret","h1","section","TreePopup","props","Tree","tree","name","owner","UserName","Number","toFixed","String","userName","isLocked","toLowerCase","id_owner","MyButton","Factor","zoomLevel","StyledPop","Popup","InBoundersMarkups","Trees","setTrees","useEffect","setLoadTrees","clearTimeout","setTimeout","bounds","lon","Bounders","lat","complete","then","trees","catch","error","MyMap","closePopup","xSize","ySize","treeIcon","window","L","icon","iconUrl","iconSize","iconAnchor","popupAnchor","Array","from","filter","t","geoloc","map","CircleMarker","color","center","radius","_id","Marker","position","convertBounds","mapEvents","currentBounds","getBounds","getNorthEast","lng","getSouthWest","CenterLocatorHandler","useMapEvents","load","setBoundsView","moveend","setMapCenter","getCenter","ZoomHandler","zoomend","setZoomLevel","getZoom","initialCenterCoordinates","mapLimits","Map","mapCenter","boundsView","setMap","MapContainer","style","height","zoom","scrollWheelZoom","preferCanvas","whenCreated","maxBounds","minZoom","maxZoom","TileLayer","maxNativeZoom","attribution","url","disableClusteringAtZoom","maxClusterRadius","showCoverageOnHover","chunkedLoading","spiderfyOnMaxZoom","userTrees","setUserTrees","userLeaves","setUserLeaves","Gamepage","loadTrees","GameContainer","Nav","localStorage","clear","LoadingTrees","hidden","LoadingTreesText","Counts","nav","article","small","Achievements","Succes","UserAchievements","Top","Middle","Footer","UserPage","NotFound","Background","Error404","Error404Img","error404","TreeError404","LeaderboardPage","App","path","exact","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","querySelector"],"mappings":"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","file":"static/js/main.439057d3.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nfunction Login() {\r\n    const navigate = useNavigate();\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n    async function loginOnClick() {\r\n        setErrorMessage(\"\");\r\n        try {\r\n            const loggedIn = await axios.post(\"http://localhost:5000/login\", {\r\n                email,\r\n                password,\r\n            });\r\n            if (loggedIn) {\r\n                navigate(\"/gamepage\");\r\n            }\r\n        } catch (error) {\r\n            setErrorMessage(error.response.data.message);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ErrorMessage>{errorMessage}</ErrorMessage>\r\n            <section className={\"container\"}>\r\n                <form>\r\n                    <div className={\"field\"}>\r\n                        <label htmlFor={\"email\"} />\r\n                        <div className={\"control\"}>\r\n                            <Input\r\n                                placeholder={\"Email\"}\r\n                                type={\"text\"}\r\n                                id={\"email\"}\r\n                                onChange={event => setEmail(event.target.value)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className={\"field\"}>\r\n                        <label htmlFor={\"password\"} />\r\n                        <div className={\"control\"}>\r\n                            <Input\r\n                                placeholder={\"Password\"}\r\n                                type={\"password\"}\r\n                                id={\"password\"}\r\n                                onChange={event =>\r\n                                    setPassword(event.target.value)\r\n                                }\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className={\"buttons\"}>\r\n                        <Button\r\n                            className={\"submit\"}\r\n                            type={\"submit\"}\r\n                            onClick={loginOnClick}>\r\n                            {\"Login\"}\r\n                        </Button>\r\n                    </div>\r\n                </form>\r\n            </section>\r\n        </>\r\n    );\r\n}\r\n\r\nconst ErrorMessage = styled.h3`\r\n    color: white;\r\n`;\r\n\r\nconst Button = styled.button`\r\n    background-color: #82c23e;\r\n    color: white;\r\n    border: none;\r\n    width: 30vw;\r\n    border-radius: 3px;\r\n    margin-top: 6px;\r\n    font-size: 20px;\r\n    padding-bottom: 6px;\r\n    padding-top: 6px;\r\n    &:hover {\r\n        transition: ease-in 0.3s;\r\n        box-shadow: 5px 5px 5px 0px rgba(0, 0, 0, 0.5);\r\n    }\r\n`;\r\n\r\nconst Input = styled.input`\r\n    width: 30vw;\r\n    padding-right: 0px; /* top | right | bottom | left */\r\n    padding-left: 0px;\r\n    padding-top: 6px;\r\n    padding-bottom: 6px;\r\n    border: none;\r\n    border-radius: 3px;\r\n    margin-top: 6px;\r\n`;\r\n\r\nexport default Login;\r\n","import axios from \"axios\";\r\nimport React, {useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nfunction Register() {\r\n    const navigate = useNavigate();\r\n    const [email, setEmail] = useState(\"\");\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [passwordVerify, setPasswordVerify] = useState(\"\");\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n    console.log(email, username, password, passwordVerify);\r\n\r\n    async function registerOnClick() {\r\n        setErrorMessage(\"\");\r\n        try {\r\n            const Registered = await axios.post(\r\n                \"http://localhost:5000/register\",\r\n                {\r\n                    email,\r\n                    username,\r\n                    password,\r\n                    passwordVerify,\r\n                },\r\n            );\r\n            if (Registered) {\r\n                navigate(\"/gamepage\");\r\n            }\r\n        } catch (error) {\r\n            setErrorMessage(error.response.data.message);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ErrorMessage>{errorMessage}</ErrorMessage>\r\n            <section className={\"container\"}>\r\n                <form>\r\n                    <div className={\"field\"}>\r\n                        <label htmlFor={\"email\"} />\r\n                        <div className={\"control\"}>\r\n                            <Input\r\n                                placeholder={\"Email\"}\r\n                                type={\"text\"}\r\n                                id={\"email\"}\r\n                                onChange={event => setEmail(event.target.value)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className={\"username\"}>\r\n                        <label htmlFor={\"username\"} />\r\n                        <div className={\"control\"}>\r\n                            <Input\r\n                                placeholder={\"Username\"}\r\n                                type={\"text\"}\r\n                                id={\"username\"}\r\n                                onChange={event =>\r\n                                    setUsername(event.target.value)\r\n                                }\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className={\"field\"}>\r\n                        <label htmlFor={\"password\"} />\r\n                        <div className={\"control\"}>\r\n                            <Input\r\n                                placeholder={\"Password\"}\r\n                                type={\"password\"}\r\n                                id={\"password\"}\r\n                                onChange={event =>\r\n                                    setPassword(event.target.value)\r\n                                }\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className={\"field\"}>\r\n                        <label htmlFor={\"passwordVerify\"} />\r\n                        <div className={\"control\"}>\r\n                            <Input\r\n                                placeholder={\"Confirm Password\"}\r\n                                type={\"password\"}\r\n                                id={\"passwordVerify\"}\r\n                                onChange={event =>\r\n                                    setPasswordVerify(event.target.value)\r\n                                }\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className={\"buttons\"}>\r\n                        <Button\r\n                            className={\"submit\"}\r\n                            type={\"submit\"}\r\n                            onClick={registerOnClick}>\r\n                            {\"Register\"}\r\n                        </Button>\r\n                    </div>\r\n                </form>\r\n            </section>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Register;\r\n\r\nconst ErrorMessage = styled.h3`\r\n    color: white;\r\n`;\r\n\r\nconst Button = styled.button`\r\n    background-color: #82c23e;\r\n    color: white;\r\n    border: none;\r\n    width: 30vw;\r\n    border-radius: 3px;\r\n    margin-top: 6px;\r\n    font-size: 20px;\r\n    padding-bottom: 6px;\r\n    padding-top: 6px;\r\n    &:hover {\r\n        transition: ease-in 0.3s;\r\n        box-shadow: 5px 5px 5px 0px rgba(0, 0, 0, 0.5);\r\n    }\r\n`;\r\nconst Input = styled.input`\r\n    width: 30vw;\r\n    /* top | right | bottom | left */\r\n    padding-right: 0px;\r\n    padding-left: 0px;\r\n    padding-top: 6px;\r\n    padding-bottom: 6px;\r\n    border: none;\r\n    border-radius: 3px;\r\n    margin-top: 6px;\r\n`;\r\n","import React, {useState, useEffect} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport axios from \"axios\";\r\nimport {Marker, CircleMarker, Popup} from \"react-leaflet\";\r\nimport icon from \"../ressources/img/jean-victor-balin-tree.svg\";\r\nimport TreePopup from \"./LeafletTreePopup\";\r\n\r\n/**\r\n * Factor to adapt sizing and positionning according to zoom level\r\n */\r\nconst Factor = zoomLevel => {\r\n    switch (zoomLevel) {\r\n        case 20:\r\n            return 3;\r\n        case 19:\r\n            return 2;\r\n        case 18:\r\n        default:\r\n            return 1;\r\n    }\r\n};\r\n\r\n// Handle timout between requests\r\nlet requestWithTimout;\r\n\r\n/**\r\n * Loop over trees data and generate map markups\r\n */\r\nconst InBoundersMarkups = props => {\r\n    const [Trees, setTrees] = useState(null);\r\n\r\n    useEffect(() => {\r\n        props.setLoadTrees(true); // Display loading message\r\n\r\n        // Handle timout between requests\r\n        if (requestWithTimout) {\r\n            clearTimeout(requestWithTimout);\r\n        }\r\n        requestWithTimout = setTimeout(() => {\r\n            axios\r\n                .post(\"http://localhost:5000/trees\", {\r\n                    bounds: {lon: props.Bounders[1], lat: props.Bounders[0]},\r\n                    complete: props.zoomLevel < 19 ? false : true,\r\n                })\r\n                .then(response => {\r\n                    console.log(props.userName, response.data);\r\n                    props.setLoadTrees(false); // Hide loading message\r\n\r\n                    /* if (!response.data.filter) {\r\n                        console.log(\"test\");\r\n                        return [response.data];\r\n                    }\r\n                    console.log(\"display only geoloc\");\r\n                    return response.data.filter(t => t.geoloc); */\r\n                    return response.data;\r\n                })\r\n                .then(trees => {\r\n                    setTrees(trees);\r\n                })\r\n                .catch(error => {\r\n                    props.setLoadTrees(false); // Hide loading message\r\n                    console.error(\r\n                        \"error\",\r\n                        error.response ? error.response.data.message : error,\r\n                    );\r\n                });\r\n            requestWithTimout = null;\r\n        }, 1000);\r\n\r\n        // Detect if a tree popup is open and close it before processing request.\r\n        if (props.MyMap) {\r\n            props.MyMap.closePopup();\r\n        }\r\n    }, [props.Bounders]);\r\n\r\n    const xSize = 9 * Factor(props.zoomLevel);\r\n    const ySize = 45 * Factor(props.zoomLevel);\r\n\r\n    const Leaflet = window.L;\r\n    const treeIcon = Leaflet.icon({\r\n        iconUrl: icon,\r\n        iconSize: [xSize, ySize], // size of the icon\r\n        iconAnchor: [45 * (xSize / 50), 40 * (ySize / 50)], // point offset of the icon which will correspond to marker's location\r\n        popupAnchor: [-20 * (xSize / 50), -35 * (ySize / 50)], // point offset from which the popup should open relative to the iconAnchor\r\n    });\r\n\r\n    /**\r\n     * Display tree with less elements (wide view)\r\n     */\r\n    if (props.zoomLevel < 19) {\r\n        return (\r\n            <>\r\n                {Trees ? (\r\n                    Array.from(Trees)\r\n                        .filter(t => t.geoloc)\r\n                        .map(tree => (\r\n                            <CircleMarker\r\n                                key={tree._id}\r\n                                color={\"#00ff00\"}\r\n                                center={tree.geoloc}\r\n                                radius={2}\r\n                            />\r\n                        ))\r\n                ) : (\r\n                    <div />\r\n                )}\r\n            </>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {Trees ? (\r\n                Array.from(Trees)\r\n                    .filter(t => t.geoloc)\r\n                    .map(tree => (\r\n                        <Marker\r\n                            key={tree._id}\r\n                            position={tree.geoloc}\r\n                            icon={treeIcon}>\r\n                            <StyledPop>\r\n                                <TreePopup tree={tree} />\r\n                            </StyledPop>\r\n                        </Marker>\r\n                    ))\r\n            ) : (\r\n                <div />\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nconst StyledPop = styled(Popup)`\r\n    .leaflet-popup-content-wrapper {\r\n        background-color: lightgreen;\r\n        width: 400px;\r\n    }\r\n\r\n    .leaflet-popup-tip-container {\r\n        visibility: hidden;\r\n    }\r\n`;\r\n\r\nexport default InBoundersMarkups;\r\n","export default __webpack_public_path__ + \"static/media/tree-lidge-logo-3.e083922d.svg\";","import React, {useState} from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport Login from \"../components/Login\";\r\nimport Register from \"../components/Register\";\r\nimport MySvg from \"../ressources/img/tree-lidge-logo-3.svg\";\r\n\r\nconst Logpage = () => {\r\n    const [btnSwitch, setBtnSwitch] = useState(true);\r\n    const toggleBtnSwitchOnClick = () => {\r\n        setBtnSwitch(!btnSwitch);\r\n    };\r\n    if (btnSwitch === true) {\r\n        return (\r\n            <Container>\r\n                <Logo src={MySvg} alt={\"Tree Lidge Logo\"} />\r\n                <ContainerButtons>\r\n                    <Link to={\"/login\"}>\r\n                        <Login />\r\n                    </Link>\r\n                    <Link to={\"/register\"}>\r\n                        <Button onClick={toggleBtnSwitchOnClick}>\r\n                            {\"Register\"}\r\n                        </Button>\r\n                    </Link>\r\n                </ContainerButtons>\r\n            </Container>\r\n        );\r\n    }\r\n    return (\r\n        <Container>\r\n            <Logo src={MySvg} alt={\"Tree Lidge Logo\"} />\r\n            <ContainerButtons>\r\n                <Link to={\"/register\"}>\r\n                    <Register />\r\n                </Link>\r\n                <Link to={\"/login\"}>\r\n                    <Button onClick={toggleBtnSwitchOnClick}>{\"Login\"}</Button>\r\n                </Link>\r\n            </ContainerButtons>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Logpage;\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    width: 100%;\r\n    height: 100vh;\r\n    background: rgb(34, 193, 195);\r\n    background: linear-gradient(\r\n        0deg,\r\n        rgba(34, 193, 195, 1) 0%,\r\n        rgba(75, 152, 31, 1) 100%\r\n    );\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    font-family: \"Arial\";\r\n`;\r\n\r\nconst Logo = styled.img`\r\n    width: 20%;\r\n`;\r\n\r\nconst ContainerButtons = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\n\r\nconst Button = styled.button`\r\n    background-color: grey;\r\n    color: white;\r\n    border: none;\r\n    width: 30vw;\r\n    border-radius: 3px;\r\n    margin-top: 6px;\r\n    font-size: 20px;\r\n    padding-bottom: 6px;\r\n    padding-top: 6px;\r\n    &:hover {\r\n        transition: ease-in 0.3s;\r\n        box-shadow: 5px 5px 5px 0px rgba(0, 0, 0, 0.5);\r\n    }\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/foret.f7a18a6d.png\";","import React from \"react\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport foret from \"../ressources/img/foret.png\";\r\n\r\nconst Homepage = () => {\r\n    const navigate = useNavigate();\r\n    function returnGamepage() {\r\n        navigate(\"/gamepage\");\r\n    }\r\n    return (\r\n        <>\r\n            <Page>\r\n                <ButtonClose onClick={returnGamepage}>\r\n                    {\"Back on the game !\"}\r\n                </ButtonClose>\r\n                <ContainerTitle>\r\n                    <Title>{\"Tree Lidge\"}</Title>\r\n                </ContainerTitle>\r\n                <Wrapper>\r\n                    <Tile>{\"Leader board\"}</Tile>\r\n                    <Tile>{\"Profile\"}</Tile>\r\n                    <Tile>{\"Success\"}</Tile>\r\n                    <Tile>{\"Challenges\"}</Tile>\r\n                </Wrapper>\r\n            </Page>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Homepage;\r\n\r\nconst Page = styled.div`\r\n    background-image: url(${foret});\r\n    padding: 40px 0px;\r\n`;\r\nconst ButtonClose = styled.button`\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    background-color: red;\r\n    border-radius: 5px;\r\n    margin-top: 5px;\r\n    margin-left: 5px;\r\n    :hover {\r\n        box-shadow: rgba(0, 0, 0, 0.25) 0px 54px 55px,\r\n            rgba(0, 0, 0, 0.12) 0px -12px 30px, rgba(0, 0, 0, 0.12) 0px 4px 6px,\r\n            rgba(0, 0, 0, 0.17) 0px 12px 13px, rgba(0, 0, 0, 0.09) 0px -3px 5px;\r\n    }\r\n`;\r\nconst ContainerTitle = styled.div`\r\n    background-color: rgba(54, 198, 96, 0.8);\r\n    width: max-content;\r\n    margin-right: auto;\r\n    margin-left: auto;\r\n    padding: 0px 20px;\r\n    border-radius: 5px;\r\n`;\r\nconst Title = styled.h1`\r\n    color: black;\r\n    /**\r\n  * Fixed title sizes for desktop\r\n  */\r\n    @media only screen and (min-width: 768px) {\r\n        font-size: 4em;\r\n    }\r\n`;\r\n\r\nconst Wrapper = styled.section`\r\n    display: flex;\r\n    flex-flow: row wrap;\r\n    /**\r\n  * Fit components in wrapper from their sizes (grid of 4 buttons)\r\n  * Total width   =   width * 2 +   margin * 4\r\n  * Mobile : 80vw =   30vw  * 2 +   5vw    * 4\r\n  * Desktop : 600px = 150px * 2 +   75px   * 4\r\n  */\r\n    width: 80vw;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    background-color: transparent;\r\n    /**\r\n  * Fixed sizes for desktop\r\n  */\r\n    @media only screen and (min-width: 768px) {\r\n        width: 600px;\r\n    }\r\n`;\r\n\r\nconst Tile = styled.button`\r\n    background-color: rgba(116, 150, 110, 0.8);\r\n    width: 30vw;\r\n    height: 40vw;\r\n    margin: 2.5vw;\r\n    margin-left: 5vw;\r\n    margin-right: 5vw;\r\n    border-radius: 5px;\r\n    border: solid 1px green;\r\n    font-size: 5vw;\r\n\r\n    :hover {\r\n        -webkit-transform: scale(1.05); /* Safari et Chrome */\r\n        -moz-transform: scale(1.05); /* Firefox */\r\n        -ms-transform: scale(1.05); /* Internet Explorer 9 */\r\n        -o-transform: scale(1.05); /* Opera */\r\n        transform: scale(1.05);\r\n        text-decoration: underline;\r\n    }\r\n\r\n    /**\r\n  * Fixed buttons sizes for desktop\r\n  */\r\n    @media only screen and (min-width: 768px) {\r\n        font-size: 1.5em;\r\n        width: 150px;\r\n        height: 200px;\r\n        margin: 30px;\r\n        margin-left: 75px;\r\n        margin-right: 75px;\r\n    }\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/jean-victor-balin-tree.822b314c.svg\";","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst TreePopup = props => {\r\n    const Tree = props.tree;\r\n    return (\r\n        <Container>\r\n            <h2>{`${Tree.name}`}</h2>\r\n            <h4>\r\n                {Tree.owner ? `Owned by ${Tree.owner.UserName}` : `Free tree`}\r\n            </h4>\r\n            <p>{`Price : ${Number(Tree.value).toFixed(2) ?? \"?\"} Leaves`}</p>\r\n            <br />\r\n            {\r\n                // If tree not owned by user, display button\r\n                (String(Tree.owner) !== String(props.userName) &&\r\n                    String(Tree.isLocked).toLowerCase() === \"false\") ||\r\n                !Tree.id_owner ? (\r\n                    <MyButton\r\n                        type={\"button\"}\r\n                        onClick={() => {\r\n                            // TODO db request buying tree\r\n                            console.log(\"Buy tree\", Tree.name);\r\n                        }}>\r\n                        {\"Buy tree\"}\r\n                    </MyButton>\r\n                ) : // If not owned but locked\r\n                Tree.owner !== props.userName &&\r\n                  String(Tree.isLocked).toLowerCase() === \"true\" ? (\r\n                    \"Locked\"\r\n                ) : (\r\n                    <MyButton\r\n                        type={\"button\"}\r\n                        onClick={() => {\r\n                            // TODO db request lock tree\r\n                            console.log(\"Lock tree\", Tree.name);\r\n                        }}>\r\n                        {\"Lock tree\"}\r\n                    </MyButton>\r\n                )\r\n            }\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default TreePopup;\r\n\r\nconst Container = styled.div`\r\n    margin: 0;\r\n    padding: 0;\r\n`;\r\n\r\nconst MyButton = styled.button`\r\n    background-color: rgba(54, 198, 96, 0.8);\r\n    border: none;\r\n    border: solid 1 darkblue;\r\n    border-radius: 5px;\r\n    font-size: 1.2em;\r\n    padding: 20px;\r\n\r\n    :hover {\r\n        -webkit-transform: scale(1.05); /* Safari et Chrome */\r\n        -moz-transform: scale(1.05); /* Firefox */\r\n        -ms-transform: scale(1.05); /* Internet Explorer 9 */\r\n        -o-transform: scale(1.05); /* Opera */\r\n        transform: scale(1.05);\r\n        text-decoration: underline;\r\n    }\r\n`;\r\n","import {useMapEvents} from \"react-leaflet\";\r\n\r\n/**\r\n * Get bounds of the view and convert it into an array of coordinates\r\n */\r\nconst convertBounds = mapEvents => {\r\n    const currentBounds = mapEvents.getBounds();\r\n    const Bounds = [\r\n        [currentBounds.getNorthEast().lat, currentBounds.getNorthEast().lng],\r\n        [currentBounds.getSouthWest().lat, currentBounds.getSouthWest().lng],\r\n    ];\r\n    return Bounds;\r\n};\r\n\r\n/**\r\n * Handler detecting the center position and the current view bounds on the map, and update the state.\r\n * Update when map is loaded and when map move end.\r\n */\r\nconst CenterLocatorHandler = props => {\r\n    const mapEvents = useMapEvents({\r\n        load: () => {\r\n            // When map finish loading\r\n            // set current view bounds\r\n            props.setBoundsView(convertBounds(mapEvents));\r\n        },\r\n        moveend: () => {\r\n            // When move or zoom change on the map finish\r\n            // Set the new center coordinates and set current view bounds\r\n            props.setMapCenter(mapEvents.getCenter());\r\n            props.setBoundsView(convertBounds(mapEvents));\r\n        },\r\n    });\r\n    return null;\r\n};\r\n\r\n/**\r\n * Handler to get zoom when player change the zoom level and make it available on gamepage.\r\n */\r\nfunction ZoomHandler(props) {\r\n    const mapEvents = useMapEvents({\r\n        zoomend: () => {\r\n            props.setZoomLevel(mapEvents.getZoom());\r\n        },\r\n    });\r\n    return null;\r\n}\r\n\r\nexport {CenterLocatorHandler, ZoomHandler};\r\n","/**\r\n * Coordinate of Liège center.\r\n * Give center position of the map.\r\n */\r\nconst initialCenterCoordinates = [50.6382, 5.5683];\r\n\r\n/**\r\n * Limit of the map. Player is pushed back into the limits if try to go out these bounds.\r\n */\r\nconst mapLimits = [\r\n    [50.5722, 5.4983],\r\n    [50.7022, 5.68683],\r\n];\r\n\r\n/**\r\n * Limits of zoom. Player cannot zoom too close or too away.\r\n */\r\nconst minZoomLimit = 16;\r\nconst maxZoomLimit = 20;\r\n\r\nexport {initialCenterCoordinates, mapLimits, minZoomLimit, maxZoomLimit};\r\n","import React, {useState} from \"react\";\r\nimport {MapContainer, TileLayer} from \"react-leaflet\";\r\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\r\nimport InBoundersMarkups from \"./LeafletDataDB\"; // Requests to server\r\nimport {CenterLocatorHandler, ZoomHandler} from \"./LeafletHandlers\"; // Zoom and locator handler\r\nimport {\r\n    initialCenterCoordinates,\r\n    mapLimits,\r\n    minZoomLimit,\r\n    maxZoomLimit,\r\n} from \"./LeafletConstValues\";\r\n\r\nconst Map = props => {\r\n    /**\r\n     * Height of the map display.\r\n     * Necessary value to display the map.\r\n     */\r\n    const mapHeight = \"100vh\";\r\n\r\n    // These values are necessary for the initial display, then will be overwritten by whenCreated of GameContainer\r\n    const initialBounds = [\r\n        [50.639476371673126, 5.572589635848999],\r\n        [50.63692472520001, 5.564006567001344],\r\n    ];\r\n\r\n    const [zoomLevel, setZoomLevel] = useState(19); // initial zoom level provided for MapContainer\r\n    const [mapCenter, setMapCenter] = useState(initialCenterCoordinates); // set center of the map view\r\n    const [boundsView, setBoundsView] = useState(initialBounds); // set bounds of the map view (user screen)\r\n    const [userName] = useState(\"Bertrand\"); // TODO remove for global username variable\r\n    const [MyMap, setMap] = useState(null);\r\n\r\n    return (\r\n        <MapContainer\r\n            className={\"markercluster-map\"}\r\n            style={{height: mapHeight}}\r\n            center={mapCenter}\r\n            zoom={zoomLevel}\r\n            scrollWheelZoom={false}\r\n            preferCanvas={true}\r\n            whenCreated={map => {\r\n                setMap(map);\r\n                // Update bounds when map is loaded\r\n                const bounds = map.getBounds();\r\n                setBoundsView([\r\n                    [bounds.getNorthEast().lat, bounds.getNorthEast().lng],\r\n                    [bounds.getSouthWest().lat, bounds.getSouthWest().lng],\r\n                ]);\r\n            }}\r\n            maxBounds={mapLimits}\r\n            minZoom={minZoomLimit}\r\n            maxZoom={maxZoomLimit}>\r\n            <ZoomHandler zoomLevel={zoomLevel} setZoomLevel={setZoomLevel} />\r\n            <CenterLocatorHandler\r\n                mapCenter={mapCenter}\r\n                setMapCenter={setMapCenter}\r\n                setBoundsView={setBoundsView}\r\n            />\r\n            <TileLayer\r\n                maxNativeZoom={19} // Zoom level +20 unavailable, use and scale level 19\r\n                maxZoom={maxZoomLimit}\r\n                attribution={\r\n                    '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                }\r\n                url={\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"}\r\n            />\r\n            <MarkerClusterGroup\r\n                /**\r\n                 * Documentation markercluster\r\n                 * https://www.npmjs.com/package/leaflet.markercluster\r\n                 * https://github.com/Leaflet/Leaflet.markercluster#usage\r\n                 */\r\n                disableClusteringAtZoom={19} // Disable clsuetering and display all individual markers\r\n                maxClusterRadius={100} // Set number of cluster around eachother. Bigger value mean less cluster markers.\r\n                showCoverageOnHover={false} // Show area of the cluster\r\n                chunkedLoading={true} // Boolean to split the addLayers processing in to small intervals so that the page *may* not freeze.\r\n                spiderfyOnMaxZoom={false}>\r\n                {/* Show markers linked when close to eachother */}\r\n                <InBoundersMarkups\r\n                    zoomLevel={zoomLevel}\r\n                    Bounders={boundsView}\r\n                    userName={userName}\r\n                    userTrees={props.userTrees}\r\n                    setUserTrees={props.setUserTrees}\r\n                    userLeaves={props.userLeaves}\r\n                    setUserLeaves={props.setUserLeaves}\r\n                    setLoadTrees={props.setLoadTrees}\r\n                    MyMap={MyMap}\r\n                />\r\n            </MarkerClusterGroup>\r\n        </MapContainer>\r\n    );\r\n};\r\n\r\nexport default Map;\r\n","import React, {useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Map from \"../components/LeafletMap\";\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nconst Gamepage = () => {\r\n    const navigate = useNavigate();\r\n    const [userTrees, setUserTrees] = useState(0); // number of trees owned\r\n    const [userLeaves, setUserLeaves] = useState(5000); // Number of leaves owned\r\n    const [loadTrees, setLoadTrees] = useState(false); // Controll display of loading message\r\n\r\n    function leaderBoard() {\r\n        navigate(\"/leaderboard\");\r\n    }\r\n\r\n    function menu() {\r\n        navigate(\"/homepage\");\r\n    }\r\n\r\n    function logout() {\r\n        localStorage.clear();\r\n        navigate(\"/\");\r\n    }\r\n\r\n    return (\r\n        <GameContainer>\r\n            <Nav>\r\n                <Button onClick={menu}>{\"Menu\"}</Button>\r\n                <Button onClick={leaderBoard}>{\"Leaderboard\"}</Button>\r\n                <Button onClick={logout}>{\"Logout\"}</Button>\r\n            </Nav>\r\n            <Map\r\n                userTrees={userTrees}\r\n                setUserTrees={setUserTrees}\r\n                userLeaves={userLeaves}\r\n                setUserLeaves={setUserLeaves}\r\n                setLoadTrees={setLoadTrees}\r\n            />\r\n            <LoadingTrees hidden={!loadTrees}>\r\n                <i className={\"fas fa-leaf\"} style={{color: \"darkgreen\"}} />\r\n                <LoadingTreesText>{\"Requesting trees\"}</LoadingTreesText>\r\n                <i className={\"fas fa-leaf\"} style={{color: \"darkgreen\"}} />\r\n            </LoadingTrees>\r\n            <Counts>\r\n                <p>\r\n                    {\"Trees : \"} {userTrees}\r\n                </p>\r\n                <p>\r\n                    {\"Leaves : \"} {userLeaves}\r\n                </p>\r\n            </Counts>\r\n        </GameContainer>\r\n    );\r\n};\r\nexport default Gamepage;\r\n\r\n/**\r\n * Main container of the current page.\r\n */\r\nconst GameContainer = styled.section`\r\n    position: relative;\r\n    width: 100%;\r\n    background-color: yellow;\r\n`;\r\n\r\n/**\r\n * Navbar.\r\n */\r\nconst Nav = styled.nav`\r\n    display: flex;\r\n    flex-flow: row nowrap;\r\n    justify-content: space-between;\r\n    width: 90%;\r\n    position: absolute;\r\n    top: 10px;\r\n    left: 5vw;\r\n    z-index: 999;\r\n`;\r\n\r\n/**\r\n * Buttons in the navbar.\r\n */\r\nconst Button = styled.button`\r\n    background-color: rgba(54, 198, 96, 0.8);\r\n    border: none;\r\n    border: solid 1 darkblue;\r\n    border-radius: 5px;\r\n    font-size: clamp(0.8em, 4vw, 2em);\r\n    padding: 20px;\r\n\r\n    :hover {\r\n        -webkit-transform: scale(1.05); /* Safari et Chrome */\r\n        -moz-transform: scale(1.05); /* Firefox */\r\n        -ms-transform: scale(1.05); /* Internet Explorer 9 */\r\n        -o-transform: scale(1.05); /* Opera */\r\n        transform: scale(1.05);\r\n        text-decoration: underline;\r\n    }\r\n`;\r\n\r\n/**\r\n * Informative display for the player.\r\n * Show number of trees and leaves owned by the player.\r\n */\r\nconst Counts = styled.article`\r\n    background-color: rgba(54, 198, 96, 0.8);\r\n    position: absolute;\r\n    text-align: right;\r\n    bottom: 2vh;\r\n    right: 2vh;\r\n    padding: 20px;\r\n    width: 35vw;\r\n    z-index: 999;\r\n`;\r\n\r\nconst LoadingTrees = styled.div`\r\n    background-color: rgba(54, 198, 96, 0.8);\r\n    position: absolute;\r\n    bottom: 2vh;\r\n    left: 2vh;\r\n    padding: 20px;\r\n    z-index: 999;\r\n`;\r\n\r\nconst LoadingTreesText = styled.small`\r\n    margin: 20px;\r\n    color: darkgreen;\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Achievements = () => (\r\n    <Container>\r\n        <p>{\"ACHIEVEMENTS\"}</p>\r\n    </Container>\r\n);\r\n\r\nconst Container = styled.div`\r\n    background-color: rgba(116, 150, 110, 0.8);\r\n    border-left: 5px solid rgba(54, 198, 96, 0.8);\r\n    border-top: 5px solid rgba(54, 198, 96, 0.8);\r\n    border-bottom: 2px solid rgba(54, 198, 96, 0.8);\r\n    border-right: 2px solid rgba(54, 198, 96, 0.8);\r\n    border-radius: 45px 0px 45px 0px;\r\n    text-align: center;\r\n    color: white;\r\n    text-decoration: underline #ff6600;\r\n    padding-top: 20px;\r\n    width: 200px;\r\n    height: 150px;\r\n`;\r\n\r\nexport default Achievements;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Succes = () => (\r\n    <Container>\r\n        <p>{\"SUCCES\"}</p>\r\n    </Container>\r\n);\r\n\r\nconst Container = styled.div`\r\n    background-color: rgba(116, 150, 110, 0.8);\r\n    border-right: 5px solid rgba(54, 198, 96, 0.8);\r\n    border-top: 5px solid rgba(54, 198, 96, 0.8);\r\n    border-bottom: 2px solid rgba(54, 198, 96, 0.8);\r\n    border-left: 2px solid rgba(54, 198, 96, 0.8);\r\n    border-radius: 0px 45px 0px 45px;\r\n    text-align: center;\r\n    color: white;\r\n    text-decoration: underline #ff6600;\r\n    padding-top: 20px;\r\n    width: 200px;\r\n    height: 150px;\r\n`;\r\n\r\nexport default Succes;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst UserAchievements = () => (\r\n    <Container>\r\n        <p>{\"USER ACHIEVMENTS\"}</p>\r\n    </Container>\r\n);\r\n\r\nconst Container = styled.div`\r\n    background-color: rgba(116, 150, 110, 0.8);\r\n    border-right: 5px solid rgba(54, 198, 96, 0.8);\r\n    border-bottom: 5px solid rgba(54, 198, 96, 0.8);\r\n    border-top: 2px solid rgba(54, 198, 96, 0.8);\r\n    border-left: 2px solid rgba(54, 198, 96, 0.8);\r\n    border-radius: 45px 0px 45px 0px;\r\n    text-align: center;\r\n    padding-top: 20px;\r\n    color: white;\r\n    text-decoration: underline #ff6600;\r\n    width: 450px;\r\n    height: 200px;\r\n`;\r\nexport default UserAchievements;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst UserName = () => (\r\n    <Container>\r\n        <p>{\"hello Name\"}</p>\r\n    </Container>\r\n);\r\n\r\nconst Container = styled.div`\r\n    background-color: rgba(116, 150, 110, 0.8);\r\n    border-right: 5px solid rgba(54, 198, 96, 0.8);\r\n    border-bottom: 5px solid rgba(54, 198, 96, 0.8);\r\n    border-top: 2px solid rgba(54, 198, 96, 0.8);\r\n    border-left: 2px solid rgba(54, 198, 96, 0.8);\r\n    border-radius: 60px 10px 60px 10px;\r\n    justify-content: center;\r\n    text-align: center;\r\n    color: white;\r\n    text-decoration: underline #ff6600;\r\n    padding-top: 40px;\r\n    width: 200px;\r\n    height: 100px;\r\n`;\r\nexport default UserName;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Achievements from \"../components/Achievements.js\";\r\nimport Succes from \"../components/Succes.js\";\r\nimport UserAchievements from \"../components/UserAchievements\";\r\nimport UserName from \"../components/UserName.js\";\r\nimport MySvg from \"../ressources/img/tree-lidge-logo-3.svg\";\r\n\r\nconst UserPage = () => (\r\n    <Container>\r\n        <Top>\r\n            <UserName />\r\n        </Top>\r\n        <Middle>\r\n            <Achievements />\r\n            <Logo src={MySvg} alt={\"logo\"} />\r\n            <Succes />\r\n        </Middle>\r\n        <Footer>\r\n            <UserAchievements />\r\n        </Footer>\r\n    </Container>\r\n);\r\nconst Container = styled.div`\r\n    background: rgb(34, 193, 195);\r\n    background: linear-gradient(\r\n        0deg,\r\n        rgba(34, 193, 195, 1) 0%,\r\n        rgba(75, 152, 31, 1) 100%\r\n    );\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin: 0;\r\n    width: 100%;\r\n    height: 50vw;\r\n`;\r\n\r\nconst Top = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    margin: 25px 0px;\r\n`;\r\n\r\nconst Middle = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    margin: 25px 50px;\r\n`;\r\n\r\nconst Logo = styled.img`\r\n    width: 20%;\r\n`;\r\nconst Footer = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: flex-end;\r\n    margin: 25px 0px;\r\n`;\r\n\r\nexport default UserPage;\r\n","export default __webpack_public_path__ + \"static/media/error404.7147f1ef.png\";","export default __webpack_public_path__ + \"static/media/TreeError404.460ba643.jpg\";","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport error404 from \"../ressources/img/error404.png\";\r\nimport TreeError404 from \"../ressources/img/TreeError404.jpg\";\r\n\r\nconst NotFound = () => (\r\n    <Container>\r\n        <Background />\r\n        <Error404>\r\n            <Error404Img src={error404} alt={\"Error 404\"} />\r\n            {\"Page not found... Maybe doesn't exist (yet)?\"}\r\n        </Error404>\r\n    </Container>\r\n);\r\n\r\nexport default NotFound;\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n`;\r\n\r\nconst Background = styled.div`\r\n    background-image: url(${TreeError404});\r\n    background-repeat: no-repeat;\r\n    background-size: cover;\r\n    position: absolute;\r\n    background-attachment: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    opacity: 0.5;\r\n    z-index: -10;\r\n`;\r\n\r\nconst Error404 = styled.div`\r\n    color: #f5413b;\r\n    font-size: 2rem;\r\n    font-family: \"Poppins\", sans-serif;\r\n    font-weight: 700;\r\n    text-shadow: -0.5px 0 white, 0 0.5px white, 0.5px 0 white, 0 -0.5px white;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    height: 100vh;\r\n`;\r\n\r\nconst Error404Img = styled.img`\r\n    width: 10rem;\r\n    margin-bottom: 2rem;\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport foret from \"../ressources/img/foret.png\";\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nconst LeaderboardPage = () => {\r\n    const navigate = useNavigate();\r\n    function closeLeaderBoard() {\r\n        navigate(\"/gamepage\");\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Page>\r\n                <ButtonClose onClick={closeLeaderBoard}>{\"X\"}</ButtonClose>\r\n                <Container>\r\n                    <Title>{\"Leaderboard\"}</Title>\r\n                </Container>\r\n            </Page>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default LeaderboardPage;\r\n\r\nconst Page = styled.div`\r\n    background-image: url(${foret});\r\n    background-attachment: fixed;\r\n    height: 100vh;\r\n    width: 100vw;\r\n    display: flex;\r\n    justify-content: center;\r\n`;\r\n\r\nconst ButtonClose = styled.button`\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    height: 24px;\r\n    width: 24px;\r\n    background-color: red;\r\n    border-radius: 5px;\r\n    margin-top: 5px;\r\n    margin-right: 5px;\r\n    :hover {\r\n        box-shadow: rgba(0, 0, 0, 0.25) 0px 54px 55px,\r\n            rgba(0, 0, 0, 0.12) 0px -12px 30px, rgba(0, 0, 0, 0.12) 0px 4px 6px,\r\n            rgba(0, 0, 0, 0.17) 0px 12px 13px, rgba(0, 0, 0, 0.09) 0px -3px 5px;\r\n    }\r\n`;\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    width: 80vw;\r\n    background-color: rgba(66, 66, 66, 0.8);\r\n`;\r\n\r\nconst Title = styled.h1`\r\n    font-family: \"Arial\";\r\n    font-size: 3rem;\r\n    margin-top: 20px;\r\n    text-decoration: underline;\r\n`;\r\n","import React from \"react\";\r\nimport {BrowserRouter as Router, Routes, Route} from \"react-router-dom\";\r\nimport Logpage from \"./containers/Logpage.js\";\r\nimport Homepage from \"./containers/Homepage.js\";\r\nimport Gamepage from \"./containers/Gamepage.js\";\r\nimport UserPage from \"./containers/UserPage.js\";\r\nimport NotFound from \"./components/NotFound.js\";\r\nimport LeaderboardPage from \"./containers/LeaderboardPage.js\";\r\n\r\nfunction App() {\r\n    return (\r\n        <Router>\r\n            <Routes>\r\n                <Route path={\"/\"} exact element={<Logpage />} />\r\n                <Route path={\"/login\"} element={<Logpage />} />\r\n                <Route path={\"/register\"} element={<Logpage />} />\r\n                <Route path={\"/gamepage\"} element={<Gamepage />} />\r\n                <Route path={\"/homepage\"} element={<Homepage />} />\r\n                <Route path={\"/userpage\"} element={<UserPage />} />\r\n                <Route path={\"/leaderboard\"} element={<LeaderboardPage />} />\r\n                <Route path={\"*\"} element={<NotFound />} />\r\n            </Routes>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import(\"web-vitals\").then(\r\n            ({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\r\n                getCLS(onPerfEntry);\r\n                getFID(onPerfEntry);\r\n                getFCP(onPerfEntry);\r\n                getLCP(onPerfEntry);\r\n                getTTFB(onPerfEntry);\r\n            },\r\n        );\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App.js\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.querySelector(\"#root\"),\r\n);\r\nreportWebVitals();\r\n"],"sourceRoot":""}